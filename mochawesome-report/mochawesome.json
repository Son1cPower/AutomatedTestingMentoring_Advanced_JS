{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-06T14:38:09.084Z",
    "end": "2023-06-06T14:38:30.940Z",
    "duration": 21856,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "06096036-1fdd-4efc-8d9c-bfcfb65f10ce",
      "title": "",
      "fullFile": "C:\\Users\\Stanislav_Nehrii\\Desktop\\AutomatedTestingMentoring_Advanced_JS\\src\\testsAPI\\test.spec.js",
      "file": "\\src\\testsAPI\\test.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
          "title": "API Test Suite",
          "fullFile": "C:\\Users\\Stanislav_Nehrii\\Desktop\\AutomatedTestingMentoring_Advanced_JS\\src\\testsAPI\\test.spec.js",
          "file": "\\src\\testsAPI\\test.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Create demo project and data for tests in \"API Test Suite\"",
              "fullTitle": "API Test Suite \"before all\" hook: Create demo project and data for tests in \"API Test Suite\"",
              "timedOut": false,
              "duration": 19302,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(120000)\nconst bodyForProject = {\n  \"entryType\": \"INTERNAL\",\n  \"projectName\": demoProjectName\n}\nresponse = await sendRequest('project', 'post', bodyForProject);\nexpect(await response.status).to.equal(201);\ndemoProjectID = response.data.id\nconst bodyForData = {}\nresponse = await sendRequest(`demo/${demoProjectName}`, 'post', bodyForData);\nexpect(await response.status).to.equal(200);\narrOfDemoLaunchesID = response.data.launchIds",
              "err": {},
              "uuid": "4c0c75e9-bf89-404c-ba3c-09fa44c9b10a",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Delete demo project and data after tests in \"API Test Suite\"",
              "fullTitle": "API Test Suite \"after all\" hook: Delete demo project and data after tests in \"API Test Suite\"",
              "timedOut": false,
              "duration": 268,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(120000)\nconst body = {\n  \"ids\": [demoProjectID]\n}\nresponse = await sendRequest('project', 'delete', body);\nexpect(await response.status).to.equal(200);\nresponse = await sendRequest('project/names');\nexpect(await response.status).to.equal(200);\nexpect(await response.data.includes(demoProjectName)).to.equal(false);",
              "err": {},
              "uuid": "ac755736-81ef-4a3c-a9e0-d5def33abc2b",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[GET POSITIVE] Get list of project launches and compare with DTO file",
              "fullTitle": "API Test Suite [GET POSITIVE] Get list of project launches and compare with DTO file",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(`${process.env.PROJECT}/launch`);\nexpect(response.status).to.equal(200);\nexpect(response.data.page.totalElements).to.equal(5);\nconst launchIds = response.data.content.map((launch) => launch.id);\nconst expectedIds = testData.map((data) => Number(data.launchesID))\nexpect(launchIds).to.deep.equal(expectedIds);",
              "err": {},
              "uuid": "90a1d3e6-5d15-42b5-8bd0-4122514ad837",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[GET NEGATIVE] Get list of project launches for incorect project name",
              "fullTitle": "API Test Suite [GET NEGATIVE] Get list of project launches for incorect project name",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest('fake_project_name/launch');\nexpect(response.status).to.equal(403);\nexpect(response.data.errorCode).to.equal(4003);\nexpect(response.data.message).to.equal('You do not have enough permissions. Please check the list of your available projects.');",
              "err": {},
              "uuid": "a5c6ddd6-8058-43b4-9c1e-d50559122cf4",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[POST NEGATIVE_1] Merge set of incorect launches in common one",
              "fullTitle": "API Test Suite [POST NEGATIVE_1] Merge set of incorect launches in common one",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"launches\": [arrOfDemoLaunchesID[0], arrOfDemoLaunchesID[1]],\n  \"mergeType\": \"standart\",\n  \"name\": \"New Merge\"\n}\nresponse = await sendRequest(`${demoProjectName}/launch/merge `, 'post', body);\nexpect(response.status).to.equal(406);\nexpect(response.data.errorCode).to.equal(40033);\nexpect(response.data.message).to.equal(\"Merge Strategy type null is unsupported\");",
              "err": {},
              "uuid": "ddcb059b-91e6-42f4-9f5e-4f19dd2ea23a",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[POST NEGATIVE_2] Merge set of incorect launches in common one",
              "fullTitle": "API Test Suite [POST NEGATIVE_2] Merge set of incorect launches in common one",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"launches\": [(Math.max(...arrOfDemoLaunchesID) + 1), (Math.max(...arrOfDemoLaunchesID) + 2)],\n  \"mergeType\": \"DEEP\",\n  \"name\": \"New Merge\"\n}\nresponse = await sendRequest(`${demoProjectName}/launch/merge `, 'post', body);\nexpect(response.status).to.equal(400);\nexpect(response.data.errorCode).to.equal(40016);\nexpect(response.data.message).to.equal(\"Error in handled Request. Please, check specified parameters: 'Not all launches with provided ids were found'\");\nresponse = await sendRequest(`${demoProjectName}/launch`);\nconst launchIds = response.data.content.map((launch) => launch.id);\nexpect(launchIds).not.to.deep.contain((Math.max(...arrOfDemoLaunchesID) + 1), (Math.max(...arrOfDemoLaunchesID) + 2));",
              "err": {},
              "uuid": "44459f35-4e78-4656-bfd7-73e5682bfc79",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[POST POSITIVE] Deep Merge set of specified launches in common one",
              "fullTitle": "API Test Suite [POST POSITIVE] Deep Merge set of specified launches in common one",
              "timedOut": false,
              "duration": 2036,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(120000)\nconst body = {\n  \"launches\": [arrOfDemoLaunchesID[2], arrOfDemoLaunchesID[3]],\n  \"mergeType\": \"DEEP\",\n  \"name\": \"New Merge\"\n}\nresponse = await sendRequest(`${demoProjectName}/launch/merge `, 'post', body);\nexpect(response.status).to.equal(200);\nresponse = await sendRequest(`${demoProjectName}/launch`);\nconst launchIds = response.data.content.map((launch) => launch.id);\nexpect(launchIds).not.to.deep.contain(arrOfDemoLaunchesID[2], arrOfDemoLaunchesID[3]);\nconst launchNames = response.data.content.map((launch) => launch.name);\nexpect(launchNames).to.deep.contain(\"New Merge\");",
              "err": {},
              "uuid": "872d5a0f-f007-4926-8645-46ff2980ea53",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PUT POSITIVE] Bulk added attributes",
              "fullTitle": "API Test Suite [PUT POSITIVE] Bulk added attributes",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"attributes\": [\n    {\n      \"action\": \"CREATE\",\n      \"from\": {\n        \"key\": \"os\",\n        \"value\": \"Android\"\n      },\n      \"to\": {\n        \"key\": \"demo\",\n        \"value\": \"MacOS\"\n      }\n    }],\n  \"ids\": [arrOfDemoLaunchesID[4]]\n}\nresponse = await sendRequest(`${demoProjectName}/launch/info `, 'put', body);\nexpect(response.status).to.equal(200);\nresponse = await sendRequest(`${demoProjectName}/launch`);\nawait expect(response.data.content.find(elem => elem.id === arrOfDemoLaunchesID[4]).attributes.some(elem => elem.key === `demo` && elem.value === `MacOS`)).to.be.true;",
              "err": {},
              "uuid": "9cc7968d-9c7a-44c7-88e6-7430ecc5432c",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PUT NEGATIVE_1] Bulk added attributes",
              "fullTitle": "API Test Suite [PUT NEGATIVE_1] Bulk added attributes",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"attributes\": [\n    {\n      \"action\": \"CREATE\",\n      \"from\": {\n        \"key\": \"os\",\n        \"value\": \"Android\"\n      },\n      \"to\": {\n        \"key\": \"demo\",\n        \"value\": \"MacOS\"\n      }\n    }],\n}\nresponse = await sendRequest(`${demoProjectName}/launch/info `, 'put', body);\nexpect(response.status).to.equal(400);\nexpect(response.data.errorCode).to.equal(4001);\nexpect(response.data.message).to.equal(\"Incorrect Request. [Field 'ids' should not be null.] \");",
              "err": {},
              "uuid": "9c65ba09-d435-428d-90db-fddfa078c6d4",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PUT NEGATIVE_2] Bulk added attributes",
              "fullTitle": "API Test Suite [PUT NEGATIVE_2] Bulk added attributes",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"attributes\": [\n    {\n      \"to\": {\n        \"key\": \"demo\",\n        \"value\": \"demo\"\n      }\n    }],\n  \"ids\": [arrOfDemoLaunchesID[0]]\n}\nresponse = await sendRequest(`${demoProjectName}/launch/info `, 'put', body);\nexpect(response.status).to.equal(500);\nexpect(response.data.errorCode).to.equal(5000);\nexpect(response.data.message).to.equal(\"Unclassified error [null]\");",
              "err": {},
              "uuid": "d6b8bc97-56ee-4025-b0f8-0fea4b9a85e7",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[DELETE NEGATIVE] Delete specified launches by id",
              "fullTitle": "API Test Suite [DELETE NEGATIVE] Delete specified launches by id",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"ids\": [(Math.max(...arrOfDemoLaunchesID) + 10)]\n}\nresponse = await sendRequest(`${demoProjectName}/launch `, 'delete', body);\nexpect(response.status).to.equal(200);\nexpect(response.data.successfullyDeleted.length).to.equal(0);\nexpect(response.data.errors.length).to.equal(0);\nexpect(response.data.notFound).to.deep.equal(body.ids);",
              "err": {},
              "uuid": "228c8678-5a1c-432d-80af-46014a5c07ef",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[DELETE POSITIVE] Delete specified launches by id",
              "fullTitle": "API Test Suite [DELETE POSITIVE] Delete specified launches by id",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"ids\": [arrOfDemoLaunchesID[1]]\n}\nresponse = await sendRequest(`${demoProjectName}/launch `, 'delete', body);\nexpect(response.status).to.equal(200);\nexpect(response.data.successfullyDeleted).to.deep.equal(body.ids);\nexpect(response.data.errors.length).to.equal(0);\nexpect(response.data.notFound.length).to.equal(0);\nresponse = await sendRequest(`${demoProjectName}/launch`);\nconst launchIds = response.data.content.map((launch) => launch.id);\nexpect(body.ids.every(value => !launchIds.includes(value))).is.true",
              "err": {},
              "uuid": "ce6f922a-89e6-484c-a052-fe426810a4d1",
              "parentUUID": "c6550f2e-3f91-4e7d-a07f-e3e0efd4cab7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90a1d3e6-5d15-42b5-8bd0-4122514ad837",
            "a5c6ddd6-8058-43b4-9c1e-d50559122cf4",
            "ddcb059b-91e6-42f4-9f5e-4f19dd2ea23a",
            "44459f35-4e78-4656-bfd7-73e5682bfc79",
            "872d5a0f-f007-4926-8645-46ff2980ea53",
            "9cc7968d-9c7a-44c7-88e6-7430ecc5432c",
            "9c65ba09-d435-428d-90db-fddfa078c6d4",
            "d6b8bc97-56ee-4025-b0f8-0fea4b9a85e7",
            "228c8678-5a1c-432d-80af-46014a5c07ef",
            "ce6f922a-89e6-484c-a052-fe426810a4d1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2270,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}