{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-06T18:29:26.288Z",
    "end": "2023-06-06T18:29:48.169Z",
    "duration": 21881,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2fa38a52-bcfe-4747-8c4b-cc7fd60e59e6",
      "title": "",
      "fullFile": "C:\\Users\\Stanislav_Nehrii\\Desktop\\AutomatedTestingMentoring_Advanced_JS\\src\\testsAPI\\test.spec.js",
      "file": "\\src\\testsAPI\\test.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "18e1ad8b-7f82-4692-895e-65c1205500d8",
          "title": "API Test Suite",
          "fullFile": "C:\\Users\\Stanislav_Nehrii\\Desktop\\AutomatedTestingMentoring_Advanced_JS\\src\\testsAPI\\test.spec.js",
          "file": "\\src\\testsAPI\\test.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Create demo project and data for tests in \"API Test Suite\"",
              "fullTitle": "API Test Suite \"before all\" hook: Create demo project and data for tests in \"API Test Suite\"",
              "timedOut": false,
              "duration": 19190,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bodyForProject = {\n  \"entryType\": \"INTERNAL\",\n  \"projectName\": demoProjectName\n}\nresponse = await sendRequest('project', 'post', bodyForProject);\nexpect(await response.status).to.equal(201);\ndemoProjectID = response.data.id\nconst bodyForData = {}\nresponse = await sendRequest(`demo/${demoProjectName}`, 'post', bodyForData);\nexpect(await response.status).to.equal(200);\narrOfDemoLaunchesID = response.data.launchIds",
              "err": {},
              "uuid": "e018b13a-4c72-46b6-aec7-d0f72544892e",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Delete demo project and data after tests in \"API Test Suite\"",
              "fullTitle": "API Test Suite \"after all\" hook: Delete demo project and data after tests in \"API Test Suite\"",
              "timedOut": false,
              "duration": 396,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(120000)\nconst body = {\n  \"ids\": [demoProjectID]\n}\nresponse = await sendRequest('project', 'delete', body);\nexpect(await response.status).to.equal(200);\nresponse = await sendRequest('project/names');\nexpect(await response.status).to.equal(200);\nexpect(await response.data.includes(demoProjectName)).to.equal(false);",
              "err": {},
              "uuid": "b3768ac1-e908-4155-806f-c152c1f0f27c",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[GET POSITIVE] Get list of project launches and compare with DTO file",
              "fullTitle": "API Test Suite [GET POSITIVE] Get list of project launches and compare with DTO file",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(`${conf.PROJECT}/launch`);\nexpect(response.status).to.equal(200);\nexpect(response.data.page.totalElements).to.equal(5);\nconst launchIds = response.data.content.map((launch) => launch.id);\nconst expectedIds = testData.map((data) => Number(data.launchesID))\nexpect(launchIds).to.deep.equal(expectedIds);",
              "err": {},
              "uuid": "b54f426d-da8c-48d7-902f-7f17eb0d5d10",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[GET NEGATIVE] Get list of project launches for incorect project name",
              "fullTitle": "API Test Suite [GET NEGATIVE] Get list of project launches for incorect project name",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest('fake_project_name/launch');\nexpect(response.status).to.equal(403);\nexpect(response.data.errorCode).to.equal(4003);\nexpect(response.data.message).to.equal('You do not have enough permissions. Please check the list of your available projects.');",
              "err": {},
              "uuid": "00866606-6389-436c-84cb-e1eda3a5c699",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[POST NEGATIVE_1] Merge set of incorect launches in common one",
              "fullTitle": "API Test Suite [POST NEGATIVE_1] Merge set of incorect launches in common one",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"launches\": [arrOfDemoLaunchesID[0], arrOfDemoLaunchesID[1]],\n  \"mergeType\": \"standart\",\n  \"name\": \"New Merge\"\n}\nresponse = await sendRequest(`${demoProjectName}/launch/merge `, 'post', body);\nexpect(response.status).to.equal(406);\nexpect(response.data.errorCode).to.equal(40033);\nexpect(response.data.message).to.equal(\"Merge Strategy type null is unsupported\");",
              "err": {},
              "uuid": "07f1cc3c-b31f-4694-a68c-5c7de16b997e",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[POST NEGATIVE_2] Merge set of incorect launches in common one",
              "fullTitle": "API Test Suite [POST NEGATIVE_2] Merge set of incorect launches in common one",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"launches\": [(Math.max(...arrOfDemoLaunchesID) + 1), (Math.max(...arrOfDemoLaunchesID) + 2)],\n  \"mergeType\": \"DEEP\",\n  \"name\": \"New Merge\"\n}\nresponse = await sendRequest(`${demoProjectName}/launch/merge `, 'post', body);\nexpect(response.status).to.equal(400);\nexpect(response.data.errorCode).to.equal(40016);\nexpect(response.data.message).to.equal(\"Error in handled Request. Please, check specified parameters: 'Not all launches with provided ids were found'\");\nresponse = await sendRequest(`${demoProjectName}/launch`);\nconst launchIds = response.data.content.map((launch) => launch.id);\nexpect(launchIds).not.to.deep.contain((Math.max(...arrOfDemoLaunchesID) + 1), (Math.max(...arrOfDemoLaunchesID) + 2));",
              "err": {},
              "uuid": "6ca2d12a-ee69-4b06-826c-cb8a245452e4",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[POST POSITIVE] Deep Merge set of specified launches in common one",
              "fullTitle": "API Test Suite [POST POSITIVE] Deep Merge set of specified launches in common one",
              "timedOut": false,
              "duration": 2025,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"launches\": [arrOfDemoLaunchesID[2], arrOfDemoLaunchesID[3]],\n  \"mergeType\": \"DEEP\",\n  \"name\": \"New Merge\"\n}\nresponse = await sendRequest(`${demoProjectName}/launch/merge `, 'post', body);\nexpect(response.status).to.equal(200);\nresponse = await sendRequest(`${demoProjectName}/launch`);\nconst launchIds = response.data.content.map((launch) => launch.id);\nexpect(launchIds).not.to.deep.contain(arrOfDemoLaunchesID[2], arrOfDemoLaunchesID[3]);\nconst launchNames = response.data.content.map((launch) => launch.name);\nexpect(launchNames).to.deep.contain(\"New Merge\");",
              "err": {},
              "uuid": "fe056de8-5c1c-473a-a892-bf785dc4e0df",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PUT POSITIVE] Bulk added attributes",
              "fullTitle": "API Test Suite [PUT POSITIVE] Bulk added attributes",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"attributes\": [\n    {\n      \"action\": \"CREATE\",\n      \"from\": {\n        \"key\": \"os\",\n        \"value\": \"Android\"\n      },\n      \"to\": {\n        \"key\": \"demo\",\n        \"value\": \"MacOS\"\n      }\n    }],\n  \"ids\": [arrOfDemoLaunchesID[4]]\n}\nresponse = await sendRequest(`${demoProjectName}/launch/info `, 'put', body);\nexpect(response.status).to.equal(200);\nresponse = await sendRequest(`${demoProjectName}/launch`);\nawait expect(response.data.content.find(elem => elem.id === arrOfDemoLaunchesID[4]).attributes.some(elem => elem.key === `demo` && elem.value === `MacOS`)).to.be.true;",
              "err": {},
              "uuid": "132575b6-2041-4a5c-b956-1e1231012d9f",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PUT NEGATIVE_1] Bulk added attributes",
              "fullTitle": "API Test Suite [PUT NEGATIVE_1] Bulk added attributes",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"attributes\": [\n    {\n      \"action\": \"CREATE\",\n      \"from\": {\n        \"key\": \"os\",\n        \"value\": \"Android\"\n      },\n      \"to\": {\n        \"key\": \"demo\",\n        \"value\": \"MacOS\"\n      }\n    }],\n}\nresponse = await sendRequest(`${demoProjectName}/launch/info `, 'put', body);\nexpect(response.status).to.equal(400);\nexpect(response.data.errorCode).to.equal(4001);\nexpect(response.data.message).to.equal(\"Incorrect Request. [Field 'ids' should not be null.] \");",
              "err": {},
              "uuid": "79f4ba05-a7c3-4a8e-8a25-4477c68874a2",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PUT NEGATIVE_2] Bulk added attributes",
              "fullTitle": "API Test Suite [PUT NEGATIVE_2] Bulk added attributes",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"attributes\": [\n    {\n      \"to\": {\n        \"key\": \"demo\",\n        \"value\": \"demo\"\n      }\n    }],\n  \"ids\": [arrOfDemoLaunchesID[0]]\n}\nresponse = await sendRequest(`${demoProjectName}/launch/info `, 'put', body);\nexpect(response.status).to.equal(500);\nexpect(response.data.errorCode).to.equal(5000);\nexpect(response.data.message).to.equal(\"Unclassified error [null]\");",
              "err": {},
              "uuid": "3ccc10f9-6f4f-4d76-a9a0-98ae251023c2",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[DELETE NEGATIVE] Delete specified launches by id",
              "fullTitle": "API Test Suite [DELETE NEGATIVE] Delete specified launches by id",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"ids\": [(Math.max(...arrOfDemoLaunchesID) + 10)]\n}\nresponse = await sendRequest(`${demoProjectName}/launch `, 'delete', body);\nexpect(response.status).to.equal(200);\nexpect(response.data.successfullyDeleted.length).to.equal(0);\nexpect(response.data.errors.length).to.equal(0);\nexpect(response.data.notFound).to.deep.equal(body.ids);",
              "err": {},
              "uuid": "622a71cf-a632-4143-95ed-d337640c2091",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[DELETE POSITIVE] Delete specified launches by id",
              "fullTitle": "API Test Suite [DELETE POSITIVE] Delete specified launches by id",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"ids\": [arrOfDemoLaunchesID[1]]\n}\nresponse = await sendRequest(`${demoProjectName}/launch `, 'delete', body);\nexpect(response.status).to.equal(200);\nexpect(response.data.successfullyDeleted).to.deep.equal(body.ids);\nexpect(response.data.errors.length).to.equal(0);\nexpect(response.data.notFound.length).to.equal(0);\nresponse = await sendRequest(`${demoProjectName}/launch`);\nconst launchIds = response.data.content.map((launch) => launch.id);\nexpect(body.ids.every(value => !launchIds.includes(value))).is.true",
              "err": {},
              "uuid": "773a37a7-e344-4875-834e-66c3036d312a",
              "parentUUID": "18e1ad8b-7f82-4692-895e-65c1205500d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b54f426d-da8c-48d7-902f-7f17eb0d5d10",
            "00866606-6389-436c-84cb-e1eda3a5c699",
            "07f1cc3c-b31f-4694-a68c-5c7de16b997e",
            "6ca2d12a-ee69-4b06-826c-cb8a245452e4",
            "fe056de8-5c1c-473a-a892-bf785dc4e0df",
            "132575b6-2041-4a5c-b956-1e1231012d9f",
            "79f4ba05-a7c3-4a8e-8a25-4477c68874a2",
            "3ccc10f9-6f4f-4d76-a9a0-98ae251023c2",
            "622a71cf-a632-4143-95ed-d337640c2091",
            "773a37a7-e344-4875-834e-66c3036d312a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2275,
          "root": false,
          "rootEmpty": false,
          "_timeout": 99000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 99000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}