{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-10T15:34:02.305Z",
    "end": "2023-06-10T15:34:23.631Z",
    "duration": 21326,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "637aafa8-3b13-44aa-8b2e-a8788e683dde",
      "title": "",
      "fullFile": "C:\\Users\\Stanislav_Nehrii\\Desktop\\AutomatedTestingMentoring_Advanced_JS\\src\\testsAPI\\test.spec.js",
      "file": "\\src\\testsAPI\\test.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
          "title": "API Test Suite",
          "fullFile": "C:\\Users\\Stanislav_Nehrii\\Desktop\\AutomatedTestingMentoring_Advanced_JS\\src\\testsAPI\\test.spec.js",
          "file": "\\src\\testsAPI\\test.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: [PRECONDITIONS] Create demo project and data for tests in \"API Test Suite\"",
              "fullTitle": "API Test Suite \"before all\" hook: [PRECONDITIONS] Create demo project and data for tests in \"API Test Suite\"",
              "timedOut": false,
              "duration": 18986,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bodyForProject = {\n  \"entryType\": \"INTERNAL\",\n  \"projectName\": demoProjectName\n}\nresponseSchema.properties.data = {\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\"id\"]\n}\nresponse = await sendRequest('project', 'post', bodyForProject);\nexpect(await response.status).to.equal(201);\ndemoProjectID = response.data.id\nexpect(await response).to.be.jsonSchema(responseSchema);\nconst bodyForData = {}\nresponse = await sendRequest(`demo/${demoProjectName}`, 'post', bodyForData);\nexpect(await response.status).to.equal(200);\narrOfDemoLaunchesID = response.data.launchIds\nresponseSchema.properties.data = {\n  \"type\": \"object\",\n  \"properties\": {\n    \"dashboardId\": {\n      \"type\": \"integer\"\n    },\n    \"launchIds\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"integer\"\n      }\n    }\n  },\n  \"required\": [\"dashboardId\", \"launchIds\"]\n}\nexpect(await response).to.be.jsonSchema(responseSchema);",
              "err": {},
              "uuid": "42c8b46d-aa09-4eb7-b03a-5d73f0952ec1",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: [POSTCONDITIONS] Delete demo project and data after tests in \"API Test Suite\"",
              "fullTitle": "API Test Suite \"after all\" hook: [POSTCONDITIONS] Delete demo project and data after tests in \"API Test Suite\"",
              "timedOut": false,
              "duration": 267,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"ids\": [demoProjectID]\n}\nresponse = await sendRequest('project', 'delete', body);\nexpect(await response.status).to.equal(200);\nresponseSchema.properties.data = {\n  \"type\": \"object\",\n  \"properties\": {\n    \"successfullyDeleted\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"number\"\n      }\n    },\n    \"notFound\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"number\"\n      }\n    },\n    \"errors\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"number\"\n      }\n    }\n  },\n  \"required\": [\"successfullyDeleted\", \"notFound\", \"errors\"]\n}\nresponse = await sendRequest('project/names');\nresponseSchema.properties.data = {\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  }\n}\nexpect(await response.status).to.equal(200);\nexpect(await response.data.includes(demoProjectName)).to.equal(false);",
              "err": {},
              "uuid": "cb66ae4d-265c-4009-a073-71b911aacab0",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[GET POSITIVE] Get list of project launches",
              "fullTitle": "API Test Suite [GET POSITIVE] Get list of project launches",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(`${demoProjectName}/launch`);\nexpect(response.status).to.equal(200);\nexpect(response.data.page.totalElements).to.equal(5);\nconst launchIds = response.data.content.map((launch) => launch.id);\nexpect(launchIds).to.deep.equal(arrOfDemoLaunchesID);",
              "err": {},
              "uuid": "0a552440-8d6f-46c3-8d1d-1ec6729c7c4b",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[GET NEGATIVE] Get list of project launches for incorect project name",
              "fullTitle": "API Test Suite [GET NEGATIVE] Get list of project launches for incorect project name",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest('fake_project_name/launch');\nexpect(response.status).to.equal(403);\nexpect(response.data.errorCode).to.equal(4003);\nexpect(response.data.message).to.equal('You do not have enough permissions. Please check the list of your available projects.');",
              "err": {},
              "uuid": "8039a7d2-7287-466a-894d-303bc1b8fc36",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[POST NEGATIVE_1] Merge set of incorect launches in common one",
              "fullTitle": "API Test Suite [POST NEGATIVE_1] Merge set of incorect launches in common one",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"launches\": [arrOfDemoLaunchesID[0], arrOfDemoLaunchesID[1]],\n  \"mergeType\": \"standart\",\n  \"name\": \"New Merge\"\n}\nresponse = await sendRequest(`${demoProjectName}/launch/merge `, 'post', body);\nexpect(response.status).to.equal(406);\nexpect(response.data.errorCode).to.equal(40033);\nexpect(response.data.message).to.equal(\"Merge Strategy type null is unsupported\");",
              "err": {},
              "uuid": "0d0bc588-cb26-41be-abc1-819bc1db6bda",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[POST NEGATIVE_2] Merge set of incorect launches in common one",
              "fullTitle": "API Test Suite [POST NEGATIVE_2] Merge set of incorect launches in common one",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"launches\": [(Math.max(...arrOfDemoLaunchesID) + 1), (Math.max(...arrOfDemoLaunchesID) + 2)],\n  \"mergeType\": \"DEEP\",\n  \"name\": \"New Merge\"\n}\nresponse = await sendRequest(`${demoProjectName}/launch/merge `, 'post', body);\nexpect(response.status).to.equal(400);\nexpect(response.data.errorCode).to.equal(40016);\nexpect(response.data.message).to.equal(\"Error in handled Request. Please, check specified parameters: 'Not all launches with provided ids were found'\");\nresponse = await sendRequest(`${demoProjectName}/launch`);\nconst launchIds = response.data.content.map((launch) => launch.id);\nexpect(launchIds).not.to.deep.contain((Math.max(...arrOfDemoLaunchesID) + 1), (Math.max(...arrOfDemoLaunchesID) + 2));",
              "err": {},
              "uuid": "85e5cf5c-7653-4774-9cb9-8d5f5ab2b4d7",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[POST POSITIVE] Deep Merge set of specified launches in common one",
              "fullTitle": "API Test Suite [POST POSITIVE] Deep Merge set of specified launches in common one",
              "timedOut": false,
              "duration": 1835,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"launches\": [arrOfDemoLaunchesID[2], arrOfDemoLaunchesID[3]],\n  \"mergeType\": \"DEEP\",\n  \"name\": \"New Merge\"\n}\nresponse = await sendRequest(`${demoProjectName}/launch/merge `, 'post', body);\nexpect(response.status).to.equal(200);\nresponse = await sendRequest(`${demoProjectName}/launch`);\nconst launchIds = response.data.content.map((launch) => launch.id);\nexpect(launchIds).not.to.deep.contain(arrOfDemoLaunchesID[2], arrOfDemoLaunchesID[3]);\nconst launchNames = response.data.content.map((launch) => launch.name);\nexpect(launchNames).to.deep.contain(\"New Merge\");",
              "err": {},
              "uuid": "489b7d33-cfdb-4e26-9be7-0643ee1e9437",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PUT POSITIVE] Bulk added attributes",
              "fullTitle": "API Test Suite [PUT POSITIVE] Bulk added attributes",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"attributes\": [...commonAttributes],\n  \"ids\": [arrOfDemoLaunchesID[4]]\n};\nresponse = await sendRequest(`${demoProjectName}/launch/info `, 'put', body);\nexpect(response.status).to.equal(200);\nresponse = await sendRequest(`${demoProjectName}/launch`);\nawait expect(response.data.content.find(elem => elem.id === arrOfDemoLaunchesID[4]).attributes.some(elem => elem.key === `demo` && elem.value === `MacOS`)).to.be.true;",
              "err": {},
              "uuid": "c65df595-1ca3-4992-9faa-73e4780b6733",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PUT NEGATIVE_1] Bulk added attributes",
              "fullTitle": "API Test Suite [PUT NEGATIVE_1] Bulk added attributes",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"attributes\": [...commonAttributes]\n};\nresponse = await sendRequest(`${demoProjectName}/launch/info `, 'put', body);\nexpect(response.status).to.equal(400);\nexpect(response.data.errorCode).to.equal(4001);\nexpect(response.data.message).to.equal(\"Incorrect Request. [Field 'ids' should not be null.] \");",
              "err": {},
              "uuid": "7ffadd2c-3830-40fc-be58-9098f1ca2e29",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PUT NEGATIVE_2] Bulk added attributes",
              "fullTitle": "API Test Suite [PUT NEGATIVE_2] Bulk added attributes",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"attributes\": [\n    {\n      \"to\": {\n        \"key\": \"demo\",\n        \"value\": \"demo\"\n      }\n    }],\n  \"ids\": [arrOfDemoLaunchesID[0]]\n}\nresponse = await sendRequest(`${demoProjectName}/launch/info `, 'put', body);\nexpect(response.status).to.equal(500);\nexpect(response.data.errorCode).to.equal(5000);\nexpect(response.data.message).to.equal(\"Unclassified error [null]\");",
              "err": {},
              "uuid": "f719d07f-97eb-4f2f-8747-107a8fca1981",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[DELETE NEGATIVE] Delete specified launches by id",
              "fullTitle": "API Test Suite [DELETE NEGATIVE] Delete specified launches by id",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"ids\": [(Math.max(...arrOfDemoLaunchesID) + 10)]\n}\nresponse = await sendRequest(`${demoProjectName}/launch `, 'delete', body);\nexpect(response.status).to.equal(200);\nexpect(response.data.successfullyDeleted.length).to.equal(0);\nexpect(response.data.errors.length).to.equal(0);\nexpect(response.data.notFound).to.deep.equal(body.ids);",
              "err": {},
              "uuid": "20a7914c-a037-41bf-9e76-1c2bfc2c70c6",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[DELETE POSITIVE] Delete specified launches by id",
              "fullTitle": "API Test Suite [DELETE POSITIVE] Delete specified launches by id",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  \"ids\": [arrOfDemoLaunchesID[1]]\n}\nresponse = await sendRequest(`${demoProjectName}/launch `, 'delete', body);\nexpect(response.status).to.equal(200);\nexpect(response.data.successfullyDeleted).to.deep.equal(body.ids);\nexpect(response.data.errors.length).to.equal(0);\nexpect(response.data.notFound.length).to.equal(0);\nresponse = await sendRequest(`${demoProjectName}/launch`);\nconst launchIds = response.data.content.map((launch) => launch.id);\nexpect(body.ids.every(value => !launchIds.includes(value))).is.true",
              "err": {},
              "uuid": "d075a9fa-b128-4bfb-aa22-28886434c357",
              "parentUUID": "10cbf19e-a5ab-4303-92e0-282cee7e1af8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a552440-8d6f-46c3-8d1d-1ec6729c7c4b",
            "8039a7d2-7287-466a-894d-303bc1b8fc36",
            "0d0bc588-cb26-41be-abc1-819bc1db6bda",
            "85e5cf5c-7653-4774-9cb9-8d5f5ab2b4d7",
            "489b7d33-cfdb-4e26-9be7-0643ee1e9437",
            "c65df595-1ca3-4992-9faa-73e4780b6733",
            "7ffadd2c-3830-40fc-be58-9098f1ca2e29",
            "f719d07f-97eb-4f2f-8747-107a8fca1981",
            "20a7914c-a037-41bf-9e76-1c2bfc2c70c6",
            "d075a9fa-b128-4bfb-aa22-28886434c357"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2055,
          "root": false,
          "rootEmpty": false,
          "_timeout": 99000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 99000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}